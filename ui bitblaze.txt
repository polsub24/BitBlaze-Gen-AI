import streamlit as st
import google.generativeai as genai
import requests
import os
import json
from dotenv import load_dotenv

# ----------------------
# üîë API Key Setup
# ----------------------
# Load environment variables from .env
load_dotenv()

gemini_key = os.getenv("GEMINI_API_KEY")
Fact_check_key = os.getenv("FACTCHECK_API_KEY")

genai.configure(api_key=gemini_key)
model = genai.GenerativeModel("gemini-1.5-flash")

# ----------------------
# üîó Trusted Sources
# ----------------------
DOMAIN_SOURCES = {
    "Health": ["WHO", "CDC", "NIH", "ICMR", "PubMed", "MedlinePlus"],
    "Politics": ["Election Commission", "UN", "Reuters", "BBC", "Press Information Bureau India"],
    "Finance": ["RBI", "SEBI", "World Bank", "IMF", "Economic Times"],
    "Climate": ["IPCC", "NASA Climate", "NOAA", "UNEP", "MoEFCC India"],
    "Technology": ["IEEE", "ACM", "Nature Tech", "ScienceDirect"]
}

# ----------------------
# üîç Fact Check API
# ----------------------
def fact_check_search(query):
    url = "https://factchecktools.googleapis.com/v1alpha1/claims:search"
    params = {"query": query, "key": Fact_check_key}
    response = requests.get(url, params=params)
    return response.json()

# ----------------------
# ‚úÖ Verify Claim Function
# ----------------------
def verify_claim(claim, domain="Health"):
    fc_result = fact_check_search(claim)

    if "claims" in fc_result and len(fc_result["claims"]) > 0:
        claim_data = fc_result["claims"][0]
        review = claim_data["claimReview"][0]
        return {
            "claim": claim,
            "domain": domain,
            "status": review.get("textualRating", "Unverified"),
            "confidence": 0.95,
            "explanation": review.get("title", "No explanation available"),
            "sources": [review.get("url", "")]
        }

    sources = ", ".join(DOMAIN_SOURCES.get(domain, []))
    prompt = f"""
    You are an AI misinformation checker.

    Task:
    - Verify the following claim in the domain: {domain}.
    - Use ONLY trusted sources: {sources}.
    - If not sure, return status as "Unverified".
    - Always include a confidence score between 0 and 1.

    Format output strictly as JSON with:
    - claim
    - domain
    - status
    - confidence
    - explanation
    - sources (list)
    
    Claim: "{claim}"
    """
    response = model.generate_content(prompt)
    try:
        return json.loads(response.text)
    except:
        return {"claim": claim, "domain": domain, "status": "Unverified", "confidence": 0.3, "explanation": "AI could not parse result", "sources": []}
# ----------------------
# üåê Streamlit UI - AI Misinformation Checker
# ----------------------
import streamlit as st

# ----------------------
# PAGE CONFIGURATION
# ----------------------
st.set_page_config(page_title="AI Misinformation Checker", page_icon="üîé", layout="wide")

# ----------------------
# SESSION STATE (stores UI state across reruns)
# ----------------------
if "show_theme_box" not in st.session_state:
    st.session_state.show_theme_box = False   # controls floating theme window
if "theme" not in st.session_state:
    st.session_state.theme = "Dark"           # default theme

# ----------------------
# THEME BUTTON (Top-right corner)
# ----------------------
col1, col2 = st.columns([8, 1])  
with col2:
    if st.button("üé® Theme"):  
        st.session_state.show_theme_box = not st.session_state.show_theme_box

# ----------------------
# FLOATING PROMPT
# ----------------------
if st.session_state.show_theme_box:
    st.markdown(
        """
        <style>
            @keyframes fadeIn {
                from { opacity: 0; transform: translateY(-10px); }
                to { opacity: 1; transform: translateY(0); }
            }
            .theme-prompt {
                position: absolute;
                top: 60px;
                right: 20px;
                background-color: #1E1E1E;
                padding: 12px;
                border-radius: 10px;
                box-shadow: 0px 4px 12px rgba(0,0,0,0.6);
                z-index: 1000;
                animation: fadeIn 0.3s ease-out;
                width: 150px;
                text-align: center;
            }
            .theme-btn {
                display: block;
                margin: 6px auto;
                padding: 8px 14px;
                border-radius: 6px;
                cursor: pointer;
                transition: all 0.3s ease;
                border: none;
                width: 100%;
                color: white;
            }
            .dark-btn {
                background: #2a2a2a;
                border: 1px solid #4CAF50;
            }
            .dark-btn:hover {
                background: #4CAF50;
                transform: scale(1.05);
            }
            .light-btn {
                background: #e0e0e0;
                color: black;
                border: 1px solid #36ad7a;
            }
            .light-btn:hover {
                background: #36ad7a;
                color: white;
                transform: scale(1.05);
            }
        </style>
        <div class="theme-prompt">
            <form action="" method="get">
                <button class="theme-btn dark-btn" type="submit" name="theme" value="Dark">üåô Dark Mode</button>
                <button class="theme-btn light-btn" type="submit" name="theme" value="Light">‚òÄÔ∏è Light Mode</button>
            </form>
        </div>
        """,
        unsafe_allow_html=True,
    )

# ----------------------
# THEME HANDLING
# ----------------------
query_params = st.query_params
if "theme" in query_params:
    st.session_state.theme = query_params["theme"]
    st.session_state.show_theme_box = False

dark_mode = True if st.session_state.theme == "Dark" else False

# ----------------------
# THEME CSS LOADER
# ----------------------
# ----------------------
# DARK THEME CSS
# ----------------------
def load_dark_theme():
    st.markdown(
        """
        <style>
            body {
                background-color: #0E1117;
                color: #FAFAFA;
            }
            .stApp {
                background-color: #0E1117;
                color: #FAFAFA;
            }
            .stTextArea textarea {
                background-color: #1E1E1E;
                color: #FAFAFA;
                border-radius: 10px;
                border: 1px solid #4CAF50;
                transition: all 0.3s ease-in-out;
            }
            .stTextArea textarea:hover {
                box-shadow: 0px 0px 10px #4CAF50;
                transform: scale(1.01);
            }
            .stSelectbox div[data-baseweb="select"] > div {
                background-color: #1E1E1E;
                color: #FAFAFA;
                border-radius: 10px;
                border: 1px solid #4CAF50;
                transition: all 0.3s ease-in-out;
            }
            .stSelectbox div[data-baseweb="select"] > div:hover {
                box-shadow: 0px 0px 10px #4CAF50;
                transform: scale(1.01);
            }
            .stButton button {
                background-color: #4CAF50;
                color: white;
                border-radius: 10px;
                border: none;
                padding: 8px 16px;
                transition: all 0.3s ease-in-out;
            }
            .stButton button:hover {
                opacity: 0.9;
                transform: scale(1.05);
                box-shadow: 0px 4px 12px #4CAF50;
            }
            h1, h2, h3, h4, h5, h6, p, div {
                color: #FAFAFA;
            }
        </style>
        """,
        unsafe_allow_html=True,
    )

# ----------------------
# LIGHT THEME CSS (FIXED SELECTBOX)
# ----------------------
def load_light_theme():
    st.markdown(
        """
        <style>
            body {
                background-color: #F0F0F2;
                color: #000000;
            }
            .stApp {
                background-color: #F0F0F2;
                color: #000000;
            }

            /* Text Area */
            .stTextArea textarea {
                background-color: #e8e1d1;
                color: #000000;
                border-radius: 10px;
                border: 1px solid #36ad7a;
                transition: all 0.3s ease-in-out;
            }
            .stTextArea textarea:hover {
                box-shadow: 0px 0px 10px #36ad7a;
                transform: scale(1.01);
            }

            /* Collapsed selectbox input */
            .stSelectbox div[data-baseweb="select"] > div {
                background-color: #e8e1d1 !important;
                color: #000000 !important;
                border-radius: 10px;
                border: 1px solid #36ad7a;
                transition: all 0.3s ease-in-out;
            }

            /* Expanded dropdown container */
            ul[role="listbox"] {
                background-color: #e8e1d1 !important;
                border-radius: 10px !important;
                border: 1px solid #36ad7a !important;
                padding: 0;
                margin: 0;
            }

            /* Dropdown options */
            li[role="option"] {
                background-color: #e8e1d1 !important;
                color: #000000 !important;
                padding: 8px 12px;
                cursor: pointer;
            }

            /* Hover effect */
            li[role="option"]:hover {
                background-color: #36ad7a !important;
                color: #ffffff !important;
            }

            /* Selected option */
            li[role="option"][aria-selected="true"] {
                background-color: #36ad7a !important;
                color: #ffffff !important;
            }

            /* Buttons */
            .stButton button {
                background-color: #36ad7a;
                color: white;
                border-radius: 10px;
                border: none;
                padding: 8px 16px;
                transition: all 0.3s ease-in-out;
            }
            .stButton button:hover {
                opacity: 0.9;
                transform: scale(1.05);
                box-shadow: 0px 4px 12px #36ad7a;
            }

            /* Text elements */
            h1, h2, h3, h4, h5, h6, p, div {
                color: #000000;
            }
        </style>
        """,
        unsafe_allow_html=True,
    )


# Load CSS
if dark_mode:
    load_dark_theme()
else:
    load_light_theme()


# ----------------------
# LOGO + TITLE
# ----------------------
if dark_mode:
    st.image("black_logo.png", width=80)
else:
    st.image("white_logo.png", width=80)

st.markdown("<h1 style='margin-top:0'>AI Misinformation Checker</h1>", unsafe_allow_html=True)
st.write("Enter a claim and select a domain to verify if it's true, false, misleading, or unverified.")

# ----------------------
# USER INPUTS
# ----------------------
claim = st.text_area("Enter Claim:")
domain = st.selectbox("Select Domain:", ["Health", "Politics", "Science"])

# ----------------------
# VERIFY BUTTON
# ----------------------
if st.button("Verify"):
    if claim.strip():
        with st.spinner("Verifying claim..."):
            result = {
                "status": "True",
                "confidence": 0.92,
                "explanation": "Checked against trusted sources",
                "sources": ["https://who.int"]
            }

        st.subheader("Result")
        st.markdown(f"**Status:** {result['status']}")
        st.markdown(f"**Confidence:** {round(result['confidence']*100, 2)}%")
        st.markdown(f"**Explanation:** {result['explanation']}")
        if result.get("sources"):
            st.markdown("### Sources")
            for src in result["sources"]:
                st.markdown(f"- [{src}]({src})")
    else:
        st.warning("Please enter a claim before verifying.")

